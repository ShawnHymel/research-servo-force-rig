
#include "header.h"

static const float threshold[] = {
  2.5999999, 3.2, 5.4000001, 159.7, 176.8, 188.5, 192.5, 213.89999, 221.8, 231, 
  242.3, 249.89999, 267, 277.10001, 288.70001, 301.79999, 315.20001, 343.10001, 
  358, 372.70001, 389.20001, 405, 418, 428.79999, 445.5, 573.20001, 626, 
  800.70001, 0.23030303, 0.43939394, 0.62121212, 0.62727273, 0.66363639, 
  0.75454545, 0.89999998, 0.94848484, 0.95151514, 0.95454544, 0.95757574, 
  0.96363634, 3.3, 85.300003, 122, 242.39999, 249.89999, 277.10001, 315.39999, 
  372.79999, 389.20001, 405, 418, 428.79999, 462.70001, 608.59998, 620.09998, 
  663.59998, 675.40002, 724.09998, 748.79999, 768.90002, 800.70001, 0.11212121, 
  0.15454546, 0.1969697, 0.2060606, 0.2090909, 0.21515152, 0.23030303, 
  0.24545455, 0.42424244, 0.42727274, 0.43030304, 0.43939394, 0.5212121, 
  0.57272726, 0.61515152, 0.62727273, 0.63333333, 0.64848483, 0.78787881, 
  0.80606061, 0.86363637, 0.93030304, 0.95757574, 0.96363634, 5.4000001, 
  70.599998, 78.199997, 147.8, 161.39999, 199.60001, 249.89999, 267.10001, 
  301.79999, 328.70001, 343.10001, 358.10001, 372.79999, 418, 428.79999, 
  454.39999, 467.89999, 472.29999, 476.39999, 515.70001, 522.20001, 529.5, 
  536.59998, 554.40002, 580.70001, 594.5, 605.59998, 608.59998, 617.09998, 
  675.40002, 692.20001, 800.70001, 0.15454546, 0.1969697, 0.2060606, 0.2090909, 
  0.21212122, 0.21818182, 0.23030303, 0.36363637, 0.38787878, 0.42121211, 
  0.42727274, 0.43030304, 0.43939394, 0.44545454, 0.45454547, 0.5272727, 
  0.58484846, 0.59090906, 0.60000002, 0.60606062, 0.61515152, 0.62727273, 
  0.63333333, 0.75757575, 0.76363635, 0.77575755, 0.83030301, 0.93939394, 
  0.95757574, 0.96363634, 
};

static const int th_begin[] = {
  0, 28, 40, 61, 85, 117, 
};

static const int th_len[] = {
  28, 12, 21, 24, 32, 30, 
};

/*
 * \brief Function to convert a feature value into bin index.
 * \param val Feature value, in floating-point
 * \param fid Feature identifier
 * \return bin Index corresponding to given feature value
 */
int quantize(float val, unsigned fid) {
  const size_t offset = th_begin[fid];
  const float* array = &threshold[offset];
  int len = th_len[fid];
  int low = 0;
  int high = len;
  int mid;
  float mval;
  // It is possible th_begin[i] == [total_num_threshold]. This means that
  // all features i, (i+1), ... are not used for any of the splits in the model.
  // So in this case, just return something
  if (offset == 147 || val < array[0]) {
    return -10;
  }
  while (low + 1 < high) {
    mid = (low + high) / 2;
    mval = array[mid];
    if (val == mval) {
      return mid * 2;
    } else if (val < mval) {
      high = mid;
    } else {
      low = mid;
    }
  }
  if (array[low] == val) {
    return low * 2;
  } else if (high == len) {
    return len * 2;
  } else {
    return low * 2 + 1;
  }
}

